#!/usr/bin/env bash
# This script was generated by bashly 1.1.8 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
lotodice_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "lotodice-run - lotodice é uma ferramenta em Python para gerar e verificar jogos da Mega Sena e Quina.\n"
    echo

  else
    printf "lotodice-run - lotodice é uma ferramenta em Python para gerar e verificar jogos da Mega Sena e Quina.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lotodice-run COMMAND\n"
  printf "  lotodice-run [COMMAND] --help | -h\n"
  printf "  lotodice-run --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Verifica os resultados dos jogos\n" "check"
  printf "  %s   Cria um novo jogo. ()\n" "new  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
lotodice_run_check_usage() {
  if [[ -n $long_usage ]]; then
    printf "lotodice-run check - Verifica os resultados dos jogos\n"
    echo

  else
    printf "lotodice-run check - Verifica os resultados dos jogos\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lotodice-run check [CONCURSO]\n"
  printf "  lotodice-run check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "CONCURSO"
    printf "    Se nenhum concurso for passado como parâmetro, o resultado do último\n    concurso será usado\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lotodice check\n"
    printf "  lotodice check 6385\n"
    echo

  fi
}

# :command.usage
lotodice_run_new_usage() {
  if [[ -n $long_usage ]]; then
    printf "lotodice-run new - Cria um novo jogo. ()\n"
    echo

  else
    printf "lotodice-run new - Cria um novo jogo. ()\n"
    echo

  fi

  printf "Alias: n\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lotodice-run new [JOGOS] [OPTIONS]\n"
  printf "  lotodice-run new --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--mega, -m MEGA"
    printf "    número de jogos da mega sena\n"
    echo

    # :flag.usage
    printf "  %s\n" "--quina, -q QUINA"
    printf "    número de jogos da quina\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "JOGOS"
    printf "    se nenhum argumento for passado, serão criados 4 jogos de cada\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/check_dependencies.sh
check_dependencies()
{
    [ -f "$(which lotodice)" ] || { echo "'lotodice' not found! Install it with 'pip install lotodice'."; exit 1; }
}

# src/lib/sample_function.sh
sample_function() {
  echo "it works"
}

# :command.command_functions
# :command.function
lotodice_run_check_command() {
  # src/check_command.sh
  # inspect_args

  check_dependencies

  mkdir -p jogos/quina
  mkdir -p jogos/mega

  get_latest_quina_api()
  {
      curl -s https://loteriascaixa-api.herokuapp.com/api/quina/latest
  }

  get_latest_mega_api()
  {
      curl -s https://loteriascaixa-api.herokuapp.com/api/megasena/latest
  }

  get_latest_mega_contest()
  {
      get_latest_mega_api | jq -r '.concurso'
  }

  get_latest_quina_contest()
  {
      get_latest_quina_api | jq -r '.concurso'
  }

  get_latest_mega_game()
  {
      find jogos/mega/ -iname "*-$(get_latest_mega_contest).csv" | sort -ur | head -n 1
  }

  get_latest_quina_game()
  {
      find jogos/quina/ -iname "*-$(get_latest_quina_contest).csv" | sort -ur | head -n 1
  }

  get_latest_quina_dozens()
  {
      get_latest_quina_api | jq -r '.dezenas[]' | awk '{printf "%s%s",sep,$0; sep=","}' | sed 's|\n||g'; print
  }

  get_latest_mega_dozens()
  {
      get_latest_mega_api | jq -r '.dezenas[]' | awk '{printf "%s%s",sep,$0; sep=","}' | sed 's|\n||g'; print
  }

  check_latest_games()
  {
      echo "Checking latest games..."
      echo "------------------------------------------"
      echo "Checking MEGA ..."
      echo "------------------------------------------"
      lotodice -c "$(get_latest_mega_game)" "$(get_latest_mega_dozens)"
      echo "------------------------------------------"
      echo "Checking QUINA ..."
      echo "------------------------------------------"
      lotodice -c "$(get_latest_quina_game)" "$(get_latest_quina_dozens)"
  }

  # get_latest_mega_game
  # get_latest_quina_game
  # get_latest_quina_contest
  # get_latest_mega_contest
  check_latest_games

}

# :command.function
lotodice_run_new_command() {
  # src/new_command.sh
  # echo "# this file is located in 'src/new_command.sh'"
  # echo "# code for 'lotodice new' goes here"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  # inspect_args

  check_dependencies

  games=5

  mkdir -p jogos/quina
  mkdir -p jogos/mega

  get_quina_latest_context()
  {
      curl -s https://loteriascaixa-api.herokuapp.com/api/quina/latest | jq '.proximoConcurso'
  }

  get_mega_latest_context()
  {
      curl -s https://loteriascaixa-api.herokuapp.com/api/megasena/latest | jq '.proximoConcurso'
  }

  create_new_games()
  {
      echo "Creating new games..."
      lotodice -t mega -q "$games" -e jogos/mega/"$(date +%F)"-"$(get_mega_latest_context)".csv
      lotodice -t quina -q "$games" -e jogos/quina/"$(date +%F)"-"$(get_quina_latest_context)".csv

      lotodice -b jogos/mega/"$(date +%F)"-"$(get_mega_latest_context)".csv jogos/quina/"$(date +%F)"-"$(get_quina_latest_context)".csv
  }

  create_new_games

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        lotodice_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    check | c)
      action="check"
      shift
      lotodice_run_check_parse_requirements "$@"
      shift $#
      ;;

    new | n)
      action="new"
      shift
      lotodice_run_new_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      lotodice_run_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lotodice_run_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lotodice_run_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['concurso']+x} ]]; then
          args['concurso']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
lotodice_run_new_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lotodice_run_new_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="new"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --mega | -m)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--mega']="$2"
          shift
          shift
        else
          printf "%s\n" "--mega requires an argument: --mega, -m MEGA" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --quina | -q)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--quina']="$2"
          shift
          shift
        else
          printf "%s\n" "--quina requires an argument: --quina, -q QUINA" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['jogos']+x} ]]; then
          args['jogos']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "check") lotodice_run_check_command ;;
    "new") lotodice_run_new_command ;;
  esac
}

initialize
run "$@"
